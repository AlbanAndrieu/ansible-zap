---
# This playbook contains common plays that will be run on all nodes.

- name: zap | Add group "zap"
  group:
    name="{{zap_group}}"
  tags: zap_setup

- name: zap | Add user "zap"
  user:
    name="{{zap_owner}}"
    group="{{zap_group}}"
    home="{{zap_owner_home}}"
    shell="{{zap_shell}}"
    comment="Zap User"
    createhome=yes
  tags: zap_setup

- name: shell | Check user
  user: name={{ zap_owner }} state={{ zap_user_state }}

- name: shell | Check user home directory
  stat: path={{ zap_owner_home }}
  register: home_present

- debug: msg=" shell | Path exists and is a directory"
  when: home_present.stat.isdir is defined and home_present.stat.isdir == true
  
- name: zap | Create temporary directory
  shell: mktemp -d
  register: tempdir
  sudo: true
  tags: zap_setup

- name: zap | Download zap
  get_url:
    url="{{zap_url}}"
    dest="{{ zap_dir_tmp }}/{{zap_archive}}"
  register: zap_download
  tags: zap_setup

- name: zap | Create base directory
  file:
    dest="{{zap_base_dir}}/{{zap_name}}"
    state=directory
    owner="{{zap_owner}}"
    group="{{zap_group}}"
  when: zap_download.changed
  tags: zap_setup

- name: zap | Extract archive zap
  command: tar xzf {{ zap_dir_tmp }}/{{zap_archive}} -C {{zap_base_dir}}/{{zap_name}} --strip-components=1
  when: zap_download.changed
  tags: zap_setup

#- name: zap | Resolve nexus_dir name from tar
#  shell:
#    tar tf {{ zap_dir_tmp }}/{{zap_archive}}  | head -1
#  changed_when: False
#  register: tar_dir_name
#  tags: zap_setup

#- name: zap | Extract archive zap
#  unarchive:
#    src="{{ zap_dir_tmp }}/{{zap_archive}}"
#    dest="{{zap_base_dir}}"
#    owner="{{zap_owner}}"
#    group="{{zap_group}}"
#    copy=no
#  sudo_user: "{{zap_owner}}"
#  tags: zap_setup

- name: zap | Change archive zap ownership
  file: path={{zap_base_dir}}/{{zap_name}} owner={{zap_owner}} group={{zap_group}} state=directory recurse=yes
  when: zap_download.changed
  tags: zap_setup

- name: zap | Stat {{zap_base_dir}}/{{zap_name}}
  stat: path={{zap_base_dir}}/{{zap_name}}
  register: zap_archive_extracted_present
  tags: zap_setup

- debug: msg=" zap | Path exists and is a directory"
  when: zap_archive_extracted_present.stat.isdir is defined and zap_archive_extracted_present.stat.isdir == true
  tags: zap_setup

- fail: msg=" zap | Whoops! file ownership has changed"
  when: zap_archive_extracted_present.stat.pw_name != '{{zap_owner}}'
  tags: zap_setup

- name: zap | Create a link to zap (1)
  file:
    src="{{zap_base_dir}}/{{zap_name}}"
    dest="{{zap_base_dir}}/zap-{{zap_major}}"
    state=link
    owner="{{zap_owner}}"
    group="{{zap_group}}"
  tags: zap_setup

- name: zap | Create a link to zap (2)
  file:
    src="{{zap_base_dir}}/{{zap_name}}"
    dest="{{zap_link_base_dir}}/zap-{{zap_major}}"
    state=link
    owner="{{zap_owner}}"
    group="{{zap_group}}"
  tags: zap_setup
  
- name: zap | Cleanup temporary directory
  file: name={{ tempdir.stdout }} state=absent
  tags: zap_setup

- debug: msg=" zap | Start zap {{zap_base_dir}}/{{zap_name}}/zap.sh"
